task = """
Итоговая задача модуля два была на вычисление арифметического выражения. В задаче на
повторение мы пойдем немного другим путем и выполним похожую задачу, заодно закрепив
знания по работе со строками и списками. Разбиение строки на лексемы представляет собой
процесс преобразования исходной строки в список из подстрок, называемых лексемами (token).
В арифметическом выражении лексемами являются: операторы, числа и скобки. Операторами у
нас будут следующие символы: * , /, - и +. Операторы и скобки легко выделить в строке —
они состоят из одного символа и никогда не являются частью других лексем. Числа выделить
сложнее, поскольку эти лексемы могут состоять из нескольких символов. Поэтому любая
непрерывная последовательность цифр — это одна числовая лексема.
Напишите функцию, принимающую в качестве параметра строку, содержащую математическое
выражение, и преобразующую ее в список лексем. Каждая лексема должна быть либо оператором,
либо числом, либо скобкой.
Пример:
"2+ 34 -5 * 3" => ['2', '+', '34', '-', '5', '*', '3']
В целях упрощения считаем, что числа могут быть только целыми, и входная строка всегда будет
содержать математическое выражение, состоящее из скобок, чисел и операторов.
Обратите внимание, что лексемы могут отделяться друг от друга разным количеством пробелов, а
могут и не отделяться вовсе. Пробелы не являются лексемами и в итоговый список попасть не должны.
"""


def token_parser(s):
    list_of_lexem = []
    our_number = ""
    for ch in s:
        if ch in "*/-+)(":
            if len(our_number) > 0:
                list_of_lexem.append(our_number)
                our_number = ""
            list_of_lexem.append(ch)
        elif ch in " " and len(our_number) > 0:
            list_of_lexem.append(our_number)
            our_number = ""
        elif ch.isdigit():
            our_number += ch
    if our_number != "":
        list_of_lexem.append(our_number)
    print(list_of_lexem)
    return list_of_lexem


token_parser("2+ 34 -5 * 3")
